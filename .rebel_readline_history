1584990339471:(defn play_card_inp []\n  (eval (read-string (read-line)))\n )\n\n(defn who_won_trick [x]\n  2\n )\n\n(defn play_card [players_cards2, curr_player]\n  (println curr_player)\n  (println players_cards2)\n  (println (second players_cards2))\n  (let [played_card (play_card_inp)]\n      [\n           (assoc (first players_cards2) curr_player \n                (into []  (remove #(= played_card %) \n                    (get (first players_cards2) curr_player))\n                )\n             )\n          (conj (second players_cards2) played_card)\n      ]\n  )\n  )\n(defn play_round [t myround]\n (let [round_players (first t)\n      players2 (second t)\n      mytricks []\n ]\n (println t)\n; [(take 4 (cycle (keys players))) \n (concat [round_players]\n (reduce play_card (conj round_players [players2 mytricks]))\n )\n;  []\n; ]\n)\n )\n\n(def tricks [])\n; init cards\n(def cards '([0 :c], [1 :c],[2 :c], [3 :c], [0 :s], [1 :s], [2 :s], [3 :s]))\n;(def players {:p1 [], :p2 [], :p3[], :p4[]})\n(def players {:p1 [], :p2 []}) ;, :p3 [], :p4 []})\n; cards initialize\n(def trick [])\n; mix cards\n(def mixed_cards (shuffle cards))\n; share cards\n(def cards '([0 :c], [1 :c],[2 :c], [3 :c], [0 :s], [1 :s], [2 :s], [3 :s]))\n(def players (zipmap (keys players) (map vec (partition 4 mixed_cards))))\n(def round_players (take 4 (drop (who_won_trick tricks) (cycle (keys players)))))\n\n(reduce play_round \n         (conj \n          (range 10)\n          [(take 2 (cycle (keys players))) players tricks]\n)\n         )
